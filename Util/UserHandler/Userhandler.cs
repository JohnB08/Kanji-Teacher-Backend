using Kanji_teacher_backend.dbContext;
using Kanji_teacher_backend.models;
using Microsoft.EntityFrameworkCore;

namespace Kanji_teacher_backend.Util;

public class UserHandler
{
    /// <summary>
    /// Create a new user in the database based on the uid. 
    /// Also creates a relation between the user and all valid characters. 
    /// </summary>
    /// <param name="uid">the uid generated by firebase</param>
    /// <param name="context">the database context</param>
    /// <returns>user object</returns>
    private static UserTable CreateUser(string uid, KTContext context)
    {
        UserTable user = new()
        {
            Uid = uid,
            MaxGrade = 5,
            Xp = 0
        };
        context.Users.Add(user);
        UserCharacterRelationHandler.CreateRelation(user, context);
        UserWordRelationshipHandler.CreateRelation(user, context);
        context.SaveChanges();
        return user;
    }
    /// <summary>
    /// Gets the user with input uid. If no user is found it creates a new user. 
    /// </summary>
    /// <param name="uid">the uid generated by firebase</param>
    /// <param name="context">the database context</param>
    /// <returns>user object</returns>
    public static UserTable GetUser(string uid, KTContext context)
    {
        var existingUser = context.Users.FirstOrDefault(e => e.Uid == uid) ?? CreateUser(uid, context);
        return existingUser;
    }
    public static object GetUserInfo(UserTable user, KTContext context)
    {
        var TimesCompleted = context.UserCharacterRelations.Where(e => e.User == user).Sum(e => e.TimesCompleted);
        var TimesAttempted = context.UserCharacterRelations.Where(e => e.User == user).Sum(e => e.TimesAttempted);
        var MostCompletedChar = context.UserCharacterRelations.Where(e => e.User == user).Include(e => e.Char).OrderByDescending(e => e.TimesCompleted).FirstOrDefault();
        var MostAttemptedChar = context.UserCharacterRelations.Where(e => e.User == user).Include(e => e.Char).OrderByDescending(e => e.TimesAttempted).FirstOrDefault();
        return new
        {
            Grade = user.MaxGrade,
            TimesCompleted,
            TimesAttempted,
            CurrentProgress = user.Xp,
            CurrentLimit = (6 - user.MaxGrade) * 100,
            MostCompleted = new
            {
                MostCompletedChar?.Char.Description,
                MostCompletedChar?.Char.Char,
                Attempted = MostCompletedChar?.TimesAttempted,
                Completed = MostCompletedChar?.TimesCompleted
            },
            MostAttempted = new
            {
                MostAttemptedChar?.Char.Description,
                MostAttemptedChar?.Char.Char,
                Attempted = MostAttemptedChar?.TimesAttempted,
                Completed = MostAttemptedChar?.TimesCompleted
            },
            SuccessRate = $"{(float)TimesCompleted / TimesAttempted:P2}"
        };
    }
}